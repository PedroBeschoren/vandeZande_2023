
data(hitchip1006)
tse <- mia::transformSamples(hitchip1006, method = "relabundance")

# Subset to speed up example
tse <- tse[, SummarizedExperiment::colData(tse)$subject %in% c("900", "934", "843", "875")]

tse2 <- getBaselineDivergence(tse,
                              group = "subject",
                              time_field = "time",
                              name_divergence = "divergence_from_baseline",
                              name_timedifference = "time_from_baseline",
                              assay.type="relabundance",
                              FUN = vegan::vegdist,
                              method="bray")

tse2 <- getBaselineDivergence(tse,
                              baseline_sample = "Sample-875",
                              group = "subject",
                              time_field = "time",
                              name_divergence = "divergence_from_baseline",
                              name_timedifference = "time_from_baseline",
                              assay.type="relabundance",
                              FUN = vegan::vegdist,
                              method="bray")

require(devtools)
install_version("purrr", version = "0.3.5", repos = "http://cran.us.r-project.org")
devtools::install_url("https://cran.r-project.org/src/contrib/Archive/purrr/purrr_0.3.5.tar.gz")
install.packages("C:/Users/Pedro/Downloads/purrr_0.3.5.tar.gz", repos = NULL)


library(miaTime)
library(ggplot2)
library(tidySummarizedExperiment)
data("minimalgut")
tse <- minimalgut

# quick check of number of samples 
kable(table(colData(tse)$StudyIdentifier,colData(tse)$condition_1))

tse@colData



tse |> 
  ggplot(aes(as.factor(Time.hr), StudyIdentifier)) +
  geom_tile(aes(fill=condition_1), color="white") +
  scale_fill_manual("Condition Sampled", 
                    values = c("#ff006e", "#e07a5f", "#457b9d")) +
  theme_minimal() +
  theme(axis.text.x = element_text(size=8, angle = 90),
        legend.position = "top") +
  labs(x="Time (h)", y="")

## Divergence from baseline i.e from hour zero.
tse <- mia::relAbundanceCounts(minimalgut) # get relative abundance
tse <- getBaselineDivergence(tse,
                             group = "StudyIdentifier",
                             time_field = "Time.hr",
                             name_divergence = "divergence_from_baseline",
                             name_timedifference = "time_from_baseline",
                             assay.type="relabundance",
                             FUN = vegan::vegdist,
                             method="bray")


# First define nice colors for bioreactors
bioreac_cols <- c(`Bioreactor A`= "#b2182b",
                  `Bioreactor B`= "#2166ac",
                  `Bioreactor C` = "#35978f")

tse |>
  ggplot(aes(x=Time.hr, y=divergence_from_baseline))+
  geom_point(aes(color=StudyIdentifier), size=2, alpha=0.5) +
  geom_line(aes(color=StudyIdentifier)) +
  theme_minimal() +
  scale_color_manual(values = bioreac_cols) +
  labs(x="Time (h)", y="Divergence \nfrom baseline") +
  # highlight specific timepoints
  geom_vline(xintercept = 152, lty=2, color="#991720") + 
  geom_vline(xintercept = 248, lty=2, color= "#0963bd")+
  annotate("text",x=c(152, 248),y=c(0.8, 0.8),
           label=c("Addition of\nB.hydrogenotrophica","Acetate Discontinued"),
           hjust=c(1.05,-0.05))

library(miaViz)
plotSeries(mia::transformCounts(minimalgut, method = "relabundance"),
           x = "Time.hr",
           y = "Blautia_hydrogenotrophica",
           colour_by = "Species",
           assay.type = "relabundance")+
  geom_vline(xintercept = 152, lty=2, color="#991720") + 
  geom_vline(xintercept = 248, lty=2, color= "#0963bd")+
  annotate("text",x=c(152, 248),y=c(0.2, 0.15),
           label=c("Addition of\nB.hydrogenotrophica","Acetate Discontinued"),
           hjust=c(1.05,-0.05))+
  labs(x="Time (h)", y="B.hydrogenotrophica\nRelative Abundance") +
  theme(legend.position = "none") 



# Load libraries
library(miaTime)
library(dplyr)

# Sort samples by time (necessary for getStepwiseDivergence)
tse <- tse[, order(colData(tse)$Time_hr_num)]

# Divergence between consecutive time points
tse <- getStepwiseDivergence(tse, group = "StudyIdentifier",
                             time_interval = 1,
                             time_field = "Time_hr_num",
                             name_divergence = "divergence_from_previous_step",
                             name_timedifference = "time_from_previous_step",
                             assay_name="relabundance",
                             FUN = vegan::vegdist,
                             method="bray")

# We have now new fields added in the colData:
# time_from_previous_step, divergence_from_previous_step
# print(colData(tse))

# Visualize the slope of dissimilarity between consecutive time points as a function of time (from baseline)
library(ggplot2)
theme_set(theme_bw(10))
p <- tse |> ggplot(aes(x=time_from_baseline,
                       y=divergence_from_previous_step/time_from_previous_step,
                       color=StudyIdentifier)) +
  geom_point() +
  geom_line() +
  labs(x="Time (hours)", y="Slope of dissimilarity (Bray-Curtis)") +
  geom_hline(aes(yintercept=0), linetype=2)

print(p)


# Add slope explicitly in colData
colData(tse)$slope <- colData(tse)$divergence_from_previous_step / colData(tse)$time_from_previous_step

# Split by group and perform operation
tselist <- mia::splitOn(tse, "StudyIdentifier")
library(zoo)
library(SEtools)
# colData(tse)$divergence_from_previous_step
addmean <- function (x, k, field, field_name) {
  # Calculate rolling mean
  m <- zoo::rollmean(x[[field]], k = k)
  # Initialize empty field
  colData(x)[[field_name]] <- rep(NA, ncol(x))
  # Fill in the rolling mean (length does not match with original data in rolling mean)
  colData(x)[1:length(m), field_name] <- m
  # Return the object with a new field added
  x
}


# Calculate sliding average for the field "divergence_from_previous_step"
# and store the result in a new field with the name "sliding_average"
tselist2 <- lapply(tselist, function (x) {addmean(x, k=3, field = "slope", field_name = "sliding_average")})
tselist2 <- lapply(tselist, function (x) {addmean(x, k=3, field = "divergence_from_previous_step", field_name = "sliding_average")})



# Merge back
tse <- mia::mergeSEs(tselist2)

colData(tse)$sliding_average%>%length()
colData(tse)$time_from_baseline%>%length()
rownames(colData(tse))


# Visualize
theme_set(theme_bw(10))
p <- tse |> ggplot(aes(x = time_from_baseline,
                       y = sliding_average,
                       color=StudyIdentifier)) +
  geom_point() +
  geom_line() +
  labs(x="Time (hours)", y="Mean slope of dissimilarity (Bray-Curtis)") +
  geom_hline(aes(yintercept=0), linetype=2)
print(p)
